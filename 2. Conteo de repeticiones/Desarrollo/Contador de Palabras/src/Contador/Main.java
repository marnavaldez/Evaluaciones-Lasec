/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Contador;

import java.awt.event.ActionEvent;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.DefaultListModel;
import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

    /**
     * Creates new form Main
     * @version 1.0
     * @created 15-abr.-2016 05:05:41 p. m.
     */
public class Main extends javax.swing.JFrame {
    DefaultListModel<Palabra> listaModel;
    
    /**
     * Constructor.
     */
    public Main() {
        initComponents();
        
        setLocationRelativeTo(null);

        listaModel = new DefaultListModel();
        lstLista.setModel(listaModel);

        setJTextAreaChanged(txtArea);
        txtPalabra.addActionListener(action);
    }
    
    /**
     * Hace una actualización de los objetos Palabra contenidos en la lista listModel,
     * y así mismo se ve reflejado el cambio en el componente lstLista.
     * 
     * @param indice
     * @param contador
     */
    public void actualizarLista(int indice, int contador){
        listaModel.get(indice).setRepeticiones(contador);
        listaModel.addElement(new Palabra("test"));
        listaModel.remove(listaModel.size()-1);
    }

    /**
     * Por cada palabra en la lista de palabras a contar, busca las repeticiones
     * llamando al método contarPalabra().
     * Manda llamar actualizarLista().
     */
    public void verificarTexto(){
        for(int i=0; i<listaModel.size(); i++){
            this.actualizarLista(i,contarPalabra(i));
        }
    }

    /**
     * Cuenta las repeticiones de la palabra en la lista indicada por el parametro
     * "indice" y devuelve la cantidad en un entero.
     * 
     * @param indice
     */
    public int contarPalabra(int indice){
        int contador = 0;
        String[] texto = txtArea.getText().split(" ");

        for(int j = 0; j<texto.length ; j++)
            if(listaModel.get(indice).getPalabra().equals(texto[j]))
                contador++;

        return contador;
    }

    /**
     * Manda llamar al método verificarTexto() cada vez que surja el evento
     * DocumentEvent, el cúal es escuchado por setJTextAreaChanged().
     * 
     * @param docEvent
     */
    public void manejarEvento(DocumentEvent docEvent){
        DocumentEvent.EventType type = docEvent.getType();

        if (type.equals(DocumentEvent.EventType.CHANGE)) {/*No se utiliza*/}

        else if (type.equals(DocumentEvent.EventType.INSERT)) this.verificarTexto();

        else if (type.equals(DocumentEvent.EventType.REMOVE)) this.verificarTexto();
    }

    /**
     * Agrega un DocumentListener a la variable txtArea para monitorear el la
     * escritura en la caja de texto, asi mismo con cada cambio se manda llamar al
     * método manejarEvento().
     * 
     * @param txt
     */
    public void setJTextAreaChanged(JTextArea txt){
        DocumentListener documentListener = new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                manejarEvento(e);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                manejarEvento(e);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                manejarEvento(e);
            }

        };
        txtArea.getDocument().addDocumentListener(documentListener);
    }
    
    public void capturaPalabra() {
            String palabra = txtPalabra.getText();
            if(!palabra.equals(""))
            {
                this.listaModel.addElement(new Palabra(palabra));
                this.txtPalabra.setText("");
                this.verificarTexto();
            }
        }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblAgregarPalabras = new javax.swing.JLabel();
        txtPalabra = new javax.swing.JTextField();
        scrollPane = new javax.swing.JScrollPane();
        txtArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstLista = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblAgregarPalabras.setText("Agregar Palabra:");

        txtArea.setColumns(20);
        txtArea.setLineWrap(true);
        txtArea.setRows(5);
        scrollPane.setViewportView(txtArea);

        lstLista.setFocusable(false);
        jScrollPane2.setViewportView(lstLista);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(lblAgregarPalabras)
                        .addGap(18, 18, 18)
                        .addComponent(txtPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(7, 7, 7)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(63, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtPalabra, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAgregarPalabras))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(144, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAgregarPalabras;
    private javax.swing.JList lstLista;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea txtArea;
    private javax.swing.JTextField txtPalabra;
    // End of variables declaration//GEN-END:variables
 
    /**
     * Se hace uso de la interfaz Action para capturar el enter que el usuario 
     * ejecutado en el componente que asigne como oyente a "action".
     */
    Action action = new AbstractAction()
    {
        @Override
        public void actionPerformed(ActionEvent e)
        {
            capturaPalabra();
        }
    };
}
